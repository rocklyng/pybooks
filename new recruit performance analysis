{"cells":[{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":188,"status":"ok","timestamp":1729094387318,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"4SYbua6Z8n8f"},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":555,"status":"ok","timestamp":1729094388807,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"hX2THpoD-Uxm"},"outputs":[],"source":["df = pd.read_csv('/content/drive/MyDrive/bq-results-20241016-154834-1729093738326/bq-results-20241016-154834-1729093738326.csv', header = 0)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":215,"status":"ok","timestamp":1729094390417,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"WmQ5GcpZ_TV7","outputId":"6367778a-2e19-4ea1-a356-3487668c2e7b"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u003cclass 'pandas.core.frame.DataFrame'\u003e\n","RangeIndex: 14696 entries, 0 to 14695\n","Data columns (total 89 columns):\n"," #   Column                          Non-Null Count  Dtype  \n","---  ------                          --------------  -----  \n"," 0   registered_program              14695 non-null  object \n"," 1   lifetime_sales                  11320 non-null  float64\n"," 2   avg_all_time_sales              14696 non-null  float64\n"," 3   avg_program_sales               14696 non-null  float64\n"," 4   avg_activation_year_sales       14696 non-null  float64\n"," 5   most_recent_sale_date           11320 non-null  object \n"," 6   Cohort_program_sales_max        14696 non-null  float64\n"," 7   avg_program_sales_life          14696 non-null  float64\n"," 8   ach_sale_5_level                10742 non-null  object \n"," 9   ach_sale_3_level                11320 non-null  object \n"," 10  time_regtofirstsale             11316 non-null  float64\n"," 11  time_Acttofirstsale             11316 non-null  float64\n"," 12  QR_Flag                         14696 non-null  object \n"," 13  Demotion_flag                   269 non-null    object \n"," 14  Promotion_Flag                  502 non-null    object \n"," 15  time_to_tl_promotion            303 non-null    float64\n"," 16  time_to_tb_promotion            457 non-null    float64\n"," 17  TB_promotion_Flag               457 non-null    object \n"," 18  TL_promotion_Flag               303 non-null    object \n"," 19  Tm4U_achieved_and_Left_Flag     256 non-null    object \n"," 20  Salein30_reg                    14696 non-null  object \n"," 21  Salein30_act                    14696 non-null  object \n"," 22  consultant_id                   14696 non-null  int64  \n"," 23  Tl_training_power               14696 non-null  int64  \n"," 24  Sponsor_Training_power          14696 non-null  int64  \n"," 25  LMS_Training_Power              14696 non-null  int64  \n"," 26  consultant_start_month          14696 non-null  object \n"," 27  consultant_end_month            14696 non-null  object \n"," 28  tb_start_month                  457 non-null    object \n"," 29  tb_end_month                    457 non-null    object \n"," 30  tl_start_month                  303 non-null    object \n"," 31  tl_end_month                    303 non-null    object \n"," 32  demotion_to_consultant_start    268 non-null    object \n"," 33  demotion_to_team_builder_start  4 non-null      object \n"," 34  deactivated_at                  9488 non-null   object \n"," 35  p122                            14696 non-null  object \n"," 36  p244                            14696 non-null  object \n"," 37  p277                            14696 non-null  object \n"," 38  p30                             14696 non-null  object \n"," 39  p90                             14696 non-null  object \n"," 40  period_365_end                  14696 non-null  object \n"," 41  registered_program_1            14695 non-null  object \n"," 42  most_recent_consultant_role     14696 non-null  object \n"," 43  total_tenure_deactivated        9488 non-null   float64\n"," 44  activation_date                 14696 non-null  object \n"," 45  registered_at                   14696 non-null  object \n"," 46  team_leader_id                  14687 non-null  float64\n"," 47  sponsor_Id                      14245 non-null  float64\n"," 48  total_tenure_all                14696 non-null  int64  \n"," 49  avg_program_sales_1             14696 non-null  float64\n"," 50  Cohort_program_sales_max_1      14696 non-null  float64\n"," 51  Cohort_tag                      14696 non-null  object \n"," 52  firstsalesdatetest              11316 non-null  object \n"," 53  consultant_Id_1                 14696 non-null  int64  \n"," 54  lifetime_sales_hopefully        14696 non-null  int64  \n"," 55  mrsalesdatetest                 11316 non-null  object \n"," 56  ep90_sales                      14696 non-null  int64  \n"," 57  p277_sales                      14696 non-null  int64  \n"," 58  p30_sales                       14696 non-null  int64  \n"," 59  p244_sales                      14696 non-null  int64  \n"," 60  p122_sales                      14696 non-null  int64  \n"," 61  cohort_ry_sales                 14680 non-null  float64\n"," 62  consultant_sales                14683 non-null  float64\n"," 63  team_builder_sales              3815 non-null   float64\n"," 64  team_leader_sales               3671 non-null   float64\n"," 65  p365_sales                      14696 non-null  int64  \n"," 66  lifetime_sales_1                14696 non-null  int64  \n"," 67  sponsor_Id_1                    2881 non-null   float64\n"," 68  consultant_recs                 1922 non-null   float64\n"," 69  team_builder_recs               352 non-null    float64\n"," 70  team_leader_recs                260 non-null    float64\n"," 71  p30_recs                        215 non-null    float64\n"," 72  p122_recs                       939 non-null    float64\n"," 73  p277_recs                       1517 non-null   float64\n"," 74  p244_recs                       1446 non-null   float64\n"," 75  lifetime_recruits_hopefully     2881 non-null   float64\n"," 76  TurnTime_firstPQR               2031 non-null   float64\n"," 77  drop_tbconid                    1915 non-null   float64\n"," 78  drop_registered                 1915 non-null   object \n"," 79  tb_exposed_count                1915 non-null   float64\n"," 80  tb_training_power               1915 non-null   float64\n"," 81  consultant_Id_2                 14696 non-null  int64  \n"," 82  lifetime_sales_2                11320 non-null  float64\n"," 83  avg_all_time_sales_1            14696 non-null  float64\n"," 84  avg_program_sales_life_1        14696 non-null  float64\n"," 85  activation_year_cohort_size     14696 non-null  int64  \n"," 86  avg_activation_year_sales_1     14696 non-null  float64\n"," 87  most_recent_sale_date_1         11320 non-null  object \n"," 88  training_power_total            14696 non-null  int64  \n","dtypes: float64(36), int64(17), object(36)\n","memory usage: 10.0+ MB\n"]}],"source":["df.info()"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"elapsed":199,"status":"ok","timestamp":1729094428553,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"oOxlXI9ChmLu","outputId":"e10cf092-a4ec-4777-c8bf-0ffdbd7a2525"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003elst_filled\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e52.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14691\u003c/th\u003e\n","      \u003ctd\u003e5.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14692\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14693\u003c/th\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14694\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14695\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e14696 rows Ã— 1 columns\u003c/p\u003e\n","\u003c/div\u003e\u003cbr\u003e\u003clabel\u003e\u003cb\u003edtype:\u003c/b\u003e float64\u003c/label\u003e"],"text/plain":["0        10.0\n","1        10.0\n","2         2.0\n","3         4.0\n","4        52.0\n","         ... \n","14691     5.0\n","14692     0.0\n","14693     1.0\n","14694     0.0\n","14695     0.0\n","Name: lst_filled, Length: 14696, dtype: float64"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["# Fill missing values with 0\n","df['lst_filled'] = df['lifetime_sales'].fillna(0)\n","df.lst_filled"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":166,"status":"ok","timestamp":1729094431711,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"SCblQY5fjOgk","outputId":"7c22ac21-95ad-4732-d9cf-a797c0934aed"},"outputs":[{"data":{"text/plain":["6.538854109961894"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["df.salesavgc = df.lst_filled.mean()\n","df.salesavgc\n","#yes, this is the  mean w the 0s."]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"elapsed":197,"status":"ok","timestamp":1729094434353,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"ZHTvAyOJkLMN","outputId":"5820b086-bdbf-4da0-ac26-d9c673f4eda2"},"outputs":[{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ecohort_filled\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e9.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e11.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14691\u003c/th\u003e\n","      \u003ctd\u003e5.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14692\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14693\u003c/th\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14694\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e14695\u003c/th\u003e\n","      \u003ctd\u003e0.0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e14696 rows Ã— 1 columns\u003c/p\u003e\n","\u003c/div\u003e\u003cbr\u003e\u003clabel\u003e\u003cb\u003edtype:\u003c/b\u003e float64\u003c/label\u003e"],"text/plain":["0         9.0\n","1        10.0\n","2         2.0\n","3         2.0\n","4        11.0\n","         ... \n","14691     5.0\n","14692     0.0\n","14693     1.0\n","14694     0.0\n","14695     0.0\n","Name: cohort_filled, Length: 14696, dtype: float64"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["df['cohort_filled'] = df['cohort_ry_sales'].fillna(0)\n","df.cohort_filled\n"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":327},"executionInfo":{"elapsed":165,"status":"ok","timestamp":1729094445444,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"LZySQBrXlE92","outputId":"30f4bfb4-f7f9-43bb-c4b5-fc74ee3794bd"},"outputs":[{"name":"stderr","output_type":"stream","text":["\u003cipython-input-15-81d52badb8b3\u003e:1: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n","  df.csavg = df.groupby('Cohort_tag')['cohort_filled'].mean()\n"]},{"data":{"text/html":["\u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003ecohort_filled\u003c/th\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eCohort_tag\u003c/th\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eEmbrace Success - Earner\u003c/th\u003e\n","      \u003ctd\u003e4.134216\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eJS - Earner\u003c/th\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eTm4u - Earner\u003c/th\u003e\n","      \u003ctd\u003e1.621755\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eTm4u - Loaner\u003c/th\u003e\n","      \u003ctd\u003e2.707287\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003eexamine\u003c/th\u003e\n","      \u003ctd\u003e4.111111\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\u003cbr\u003e\u003clabel\u003e\u003cb\u003edtype:\u003c/b\u003e float64\u003c/label\u003e"],"text/plain":["Cohort_tag\n","Embrace Success - Earner    4.134216\n","JS - Earner                 5.424104\n","Tm4u - Earner               1.621755\n","Tm4u - Loaner               2.707287\n","examine                     4.111111\n","Name: cohort_filled, dtype: float64"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["df.csavg = df.groupby('Cohort_tag')['cohort_filled'].mean()\n","# Calculate the mean of 'cohort_filled' for each group in 'Cohort_tag'\n","df.csavg"]},{"cell_type":"code","execution_count":18,"metadata":{"executionInfo":{"elapsed":187,"status":"ok","timestamp":1729094503824,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"9Pm3IGFh_cQ-"},"outputs":[],"source":["df['registered_at'] = pd.to_datetime(df['registered_at'])\n"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":140,"status":"ok","timestamp":1729094537817,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"t2ZJfRKB3bD9","outputId":"7e0e593e-d454-46ad-b5cb-ad449c1dd462"},"outputs":[{"name":"stdout","output_type":"stream","text":["                  Cohort_tag  registered_year  year_sum   year_avg  total_sum  \\\n","0   Embrace Success - Earner             2020    7152.0   5.814634    15309.0   \n","1   Embrace Success - Earner             2021    6701.0   3.257657    15309.0   \n","2   Embrace Success - Earner             2022    1456.0   3.500000    15309.0   \n","3                JS - Earner             2015     332.0  47.428571    16652.0   \n","4                JS - Earner             2016    1254.0   8.530612    16652.0   \n","5                JS - Earner             2017    2850.0   6.390135    16652.0   \n","6                JS - Earner             2018    3267.0   4.188462    16652.0   \n","7                JS - Earner             2019    5872.0   5.219556    16652.0   \n","8                JS - Earner             2020    3077.0   5.446018    16652.0   \n","9              Tm4u - Earner             2022    2678.0   1.752618     6247.0   \n","10             Tm4u - Earner             2023    2463.0   1.900463     6247.0   \n","11             Tm4u - Earner             2024    1106.0   1.075875     6247.0   \n","12             Tm4u - Loaner             2022    4055.0   3.182889    10997.0   \n","13             Tm4u - Loaner             2023    4927.0   3.118354    10997.0   \n","14             Tm4u - Loaner             2024    2015.0   1.668046    10997.0   \n","15                   examine             2017       0.0   0.000000       37.0   \n","16                   examine             2018       0.0   0.000000       37.0   \n","17                   examine             2019       0.0   0.000000       37.0   \n","18                   examine             2020       0.0   0.000000       37.0   \n","19                   examine             2021       0.0   0.000000       37.0   \n","20                   examine             2023      37.0  37.000000       37.0   \n","\n","    total_avg  \n","0    4.134216  \n","1    4.134216  \n","2    4.134216  \n","3    5.424104  \n","4    5.424104  \n","5    5.424104  \n","6    5.424104  \n","7    5.424104  \n","8    5.424104  \n","9    1.621755  \n","10   1.621755  \n","11   1.621755  \n","12   2.707287  \n","13   2.707287  \n","14   2.707287  \n","15   4.111111  \n","16   4.111111  \n","17   4.111111  \n","18   4.111111  \n","19   4.111111  \n","20   4.111111  \n"]}],"source":["import pandas as pd\n","\n","# Assuming df is your DataFrame and 'cohort_filled', 'Cohort_tagz', and 'registered_at' are columns\n","df['registered_at'] = pd.to_datetime(df['registered_at'])  # Ensure registered_at is in datetime format\n","\n","# Group total by Cohort_tagz (sum and average)\n","grouped_by_cohort = df.groupby('Cohort_tag').agg(\n","    total_sum=('cohort_filled', 'sum'),\n","    total_avg=('cohort_filled', 'mean')\n",").reset_index()\n","\n","# Filter for registrations before April 1, 2022\n","filtered_df = df[df['registered_at'] \u003c '2025-04-01']\n","\n","# Create a new column for the year of registration\n","filtered_df['registered_year'] = filtered_df['registered_at'].dt.year\n","\n","# Group by Cohort_tagz and registered_year (sum and average)\n","grouped_by_cohort_year = filtered_df.groupby(['Cohort_tag', 'registered_year']).agg(\n","    year_sum=('cohort_filled', 'sum'),\n","    year_avg=('cohort_filled', 'mean')\n",").reset_index()\n","\n","# Now, merge the grouped_by_cohort_year with the total grouped_by_cohort but without duplicating totals\n","# This will only append the year-based totals to the respective Cohort_tagz without duplicating overall totals.\n","final_df = pd.merge(grouped_by_cohort_year, grouped_by_cohort, on='Cohort_tag', how='right')\n","\n","# Fill NaN values in year_sum and year_avg with 0, since not all cohorts may have data for certain years\n","final_df['year_sum'].fillna(0, inplace=True)\n","final_df['year_avg'].fillna(0, inplace=True)\n","\n","# Display the final grouped data\n","print(final_df)\n"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":168,"status":"ok","timestamp":1729094941341,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"4bKrZDIe4xqF","outputId":"308e90a4-4bda-4310-c10a-845af29ad7c6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Tm4u Cohorts - Overall and by Year:\n","       Cohort_tag  registered_year  year_sum  year_avg  total_sum  total_avg\n","9   Tm4u - Earner              NaN       0.0       0.0     6247.0   1.621755\n","10  Tm4u - Loaner              NaN       0.0       0.0    10997.0   2.707287\n"]},{"name":"stderr","output_type":"stream","text":["\u003cipython-input-25-45c8457fe089\u003e:16: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  filtered_df['registered_year'] = filtered_df['registered_at'].dt.year\n"]}],"source":["import pandas as pd\n","\n","# Assuming df is your DataFrame and 'cohort_filled', 'Cohort_tagz', and 'registered_at' are columns\n","df['registered_at'] = pd.to_datetime(df['registered_at'])  # Ensure registered_at is in datetime format\n","\n","# Group total by Cohort_tagz (sum and average)\n","grouped_by_cohort = df.groupby('Cohort_tag').agg(\n","    total_sum=('cohort_filled', 'sum'),\n","    total_avg=('cohort_filled', 'mean')\n",").reset_index()\n","\n","# Filter for registrations before April 1, 2022\n","filtered_df = df[df['registered_at'] \u003c '2022-04-01']\n","\n","# Create a new column for the year of registration\n","filtered_df['registered_year'] = filtered_df['registered_at'].dt.year\n","\n","# Group by Cohort_tagz and registered_year (sum and average)\n","grouped_by_cohort_year = filtered_df.groupby(['Cohort_tag', 'registered_year']).agg(\n","    year_sum=('cohort_filled', 'sum'),\n","    year_avg=('cohort_filled', 'mean')\n",").reset_index()\n","\n","# Now, merge the grouped_by_cohort_year with the total grouped_by_cohort without duplicating totals\n","final_df = pd.merge(grouped_by_cohort_year, grouped_by_cohort, on='Cohort_tag', how='right')\n","\n","# Fill NaN values in year_sum and year_avg with 0\n","final_df['year_sum'].fillna(0, inplace=True)\n","final_df['year_avg'].fillna(0, inplace=True)\n","\n","# Filter the final DataFrame for 'Tm4u - Loaner' and 'Tm4u - Earner' cohorts\n","tm4u_cohorts = final_df[final_df['Cohort_tag'].isin(['Tm4u - Loaner', 'Tm4u - Earner'])]\n","\n","# Display the results for the Tm4u cohorts\n","print(\"Tm4u Cohorts - Overall and by Year:\")\n","print(tm4u_cohorts)\n","\n","# Optionally, display the complete final_df if you need to see the whole data\n","#print(final_df)\n","\n","\n"]},{"cell_type":"code","execution_count":26,"metadata":{"executionInfo":{"elapsed":178,"status":"ok","timestamp":1729095034062,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"rEOwjGuo_sRS"},"outputs":[],"source":["#cohort month , might want month year*\n","df['cohort_month'] = df['registered_at'].dt.to_period('M')"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":156,"status":"ok","timestamp":1729095280374,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"ewVKuJCH_yxp"},"outputs":[],"source":["# Calculate average sales and recruits for each cohort\n","#caveats - mean isnt isolated to a specific period/ is cumulative/technically dependent; calculate dif in sales to get period\n","#performance**\n","df.cohort_sales = df.groupby('cohort_month').agg({\n","    'p30_sales': 'mean',\n","    'p365_sales': 'mean',\n","    'ep90_sales': 'mean'\n","}).copy()\n","\n"]},{"cell_type":"code","execution_count":36,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":189,"status":"ok","timestamp":1729096607348,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"dKI2tcB8G1rQ","outputId":"ccab6ae4-9492-4c5e-a772-8e809f1f0d29"},"outputs":[{"name":"stdout","output_type":"stream","text":["              p30_sales  p365_sales  ep90_sales\n","cohort_month                                   \n","2015-09        0.000000    3.500000    0.000000\n","2015-11        0.000000    9.500000    3.000000\n","2015-12        4.000000  102.000000   31.000000\n","2016-01        1.000000    6.400000    1.800000\n","2016-02        0.076923   10.307692    1.846154\n","...                 ...         ...         ...\n","2024-06        1.234375    1.625000    0.192708\n","2024-07        0.543210    1.765432    1.086420\n","2024-08        0.566667    0.911111    0.422222\n","2024-09        0.770732    0.973171    0.202439\n","2024-10        0.456693    0.456693    0.015748\n","\n","[109 rows x 3 columns]\n"]}],"source":["print(df.cohort_sales)"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":273},"executionInfo":{"elapsed":184,"status":"ok","timestamp":1729096610461,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"YmjAxyGQB-8I","outputId":"7c7a36f1-c655-43d6-a1a0-8be8f75396d7"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"},"text/html":["\n","  \u003cdiv id=\"df-4dd9646c-7343-4c93-ba16-effcab907c3a\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eregistered_program\u003c/th\u003e\n","      \u003cth\u003elifetime_sales\u003c/th\u003e\n","      \u003cth\u003eavg_all_time_sales\u003c/th\u003e\n","      \u003cth\u003eavg_program_sales\u003c/th\u003e\n","      \u003cth\u003eavg_activation_year_sales\u003c/th\u003e\n","      \u003cth\u003emost_recent_sale_date\u003c/th\u003e\n","      \u003cth\u003eCohort_program_sales_max\u003c/th\u003e\n","      \u003cth\u003eavg_program_sales_life\u003c/th\u003e\n","      \u003cth\u003each_sale_5_level\u003c/th\u003e\n","      \u003cth\u003each_sale_3_level\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003elifetime_sales_2\u003c/th\u003e\n","      \u003cth\u003eavg_all_time_sales_1\u003c/th\u003e\n","      \u003cth\u003eavg_program_sales_life_1\u003c/th\u003e\n","      \u003cth\u003eactivation_year_cohort_size\u003c/th\u003e\n","      \u003cth\u003eavg_activation_year_sales_1\u003c/th\u003e\n","      \u003cth\u003emost_recent_sale_date_1\u003c/th\u003e\n","      \u003cth\u003etraining_power_total\u003c/th\u003e\n","      \u003cth\u003elst_filled\u003c/th\u003e\n","      \u003cth\u003ecohort_filled\u003c/th\u003e\n","      \u003cth\u003ecohort_month\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003eCommissions\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e1.605537\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-12-20 13:01:56\u003c/td\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003eAbove avg top half\u003c/td\u003e\n","      \u003ctd\u003eAbove avg\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-12-20 13:01:56\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e9.0\u003c/td\u003e\n","      \u003ctd\u003e2015-11\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003eCommissions\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e1.605537\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-09-27 11:31:00\u003c/td\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003eAbove avg top half\u003c/td\u003e\n","      \u003ctd\u003eAbove avg\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-09-27 11:31:00\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e10.0\u003c/td\u003e\n","      \u003ctd\u003e2015-11\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003eCommissions\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e1.605537\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-02-22 12:19:00\u003c/td\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003ebelow avg bottom half\u003c/td\u003e\n","      \u003ctd\u003ebelow avg\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2016-02-22 12:19:00\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e2015-09\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003eCommissions\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e1.605537\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2017-01-25 14:16:34\u003c/td\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003ebelow avg top half\u003c/td\u003e\n","      \u003ctd\u003ebelow avg\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2017-01-25 14:16:34\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e2015-12\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003eCommissions\u003c/td\u003e\n","      \u003ctd\u003e52.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e1.605537\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2019-08-20 00:00:00\u003c/td\u003e\n","      \u003ctd\u003e5.424104\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003eAbove avg top half\u003c/td\u003e\n","      \u003ctd\u003eAbove avg\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e52.0\u003c/td\u003e\n","      \u003ctd\u003e6.538854\u003c/td\u003e\n","      \u003ctd\u003e21.709677\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003e128.428571\u003c/td\u003e\n","      \u003ctd\u003e2019-08-20 00:00:00\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003e52.0\u003c/td\u003e\n","      \u003ctd\u003e11.0\u003c/td\u003e\n","      \u003ctd\u003e2015-12\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e5 rows Ã— 92 columns\u003c/p\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4dd9646c-7343-4c93-ba16-effcab907c3a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-4dd9646c-7343-4c93-ba16-effcab907c3a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4dd9646c-7343-4c93-ba16-effcab907c3a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-b14ae25d-00c1-460c-9634-bc57bc19793f\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-b14ae25d-00c1-460c-9634-bc57bc19793f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b14ae25d-00c1-460c-9634-bc57bc19793f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["  registered_program  lifetime_sales  avg_all_time_sales  avg_program_sales  \\\n","0        Commissions            10.0            6.538854           1.605537   \n","1        Commissions            10.0            6.538854           1.605537   \n","2        Commissions             2.0            6.538854           1.605537   \n","3        Commissions             4.0            6.538854           1.605537   \n","4        Commissions            52.0            6.538854           1.605537   \n","\n","   avg_activation_year_sales most_recent_sale_date  Cohort_program_sales_max  \\\n","0                 128.428571   2016-12-20 13:01:56                  5.424104   \n","1                 128.428571   2016-09-27 11:31:00                  5.424104   \n","2                 128.428571   2016-02-22 12:19:00                  5.424104   \n","3                 128.428571   2017-01-25 14:16:34                  5.424104   \n","4                 128.428571   2019-08-20 00:00:00                  5.424104   \n","\n","   avg_program_sales_life       ach_sale_5_level ach_sale_3_level  ...  \\\n","0               21.709677     Above avg top half        Above avg  ...   \n","1               21.709677     Above avg top half        Above avg  ...   \n","2               21.709677  below avg bottom half        below avg  ...   \n","3               21.709677     below avg top half        below avg  ...   \n","4               21.709677     Above avg top half        Above avg  ...   \n","\n","   lifetime_sales_2  avg_all_time_sales_1 avg_program_sales_life_1  \\\n","0              10.0              6.538854                21.709677   \n","1              10.0              6.538854                21.709677   \n","2               2.0              6.538854                21.709677   \n","3               4.0              6.538854                21.709677   \n","4              52.0              6.538854                21.709677   \n","\n","  activation_year_cohort_size avg_activation_year_sales_1  \\\n","0                           7                  128.428571   \n","1                           7                  128.428571   \n","2                           7                  128.428571   \n","3                           7                  128.428571   \n","4                           7                  128.428571   \n","\n","   most_recent_sale_date_1  training_power_total lst_filled cohort_filled  \\\n","0      2016-12-20 13:01:56                     2       10.0           9.0   \n","1      2016-09-27 11:31:00                     2       10.0          10.0   \n","2      2016-02-22 12:19:00                     2        2.0           2.0   \n","3      2017-01-25 14:16:34                     2        4.0           2.0   \n","4      2019-08-20 00:00:00                     2       52.0          11.0   \n","\n","  cohort_month  \n","0      2015-11  \n","1      2015-11  \n","2      2015-09  \n","3      2015-12  \n","4      2015-12  \n","\n","[5 rows x 92 columns]"]},"execution_count":37,"metadata":{},"output_type":"execute_result"}],"source":["df.head()"]},{"cell_type":"markdown","metadata":{"id":"nRPvKETAHcpW"},"source":["i dont remember where I was going with this, this isnt the point for me. Skipping to bottom."]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":245},"executionInfo":{"elapsed":211,"status":"error","timestamp":1729096603281,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"fih0hCyKBWlp","outputId":"f12a1ad4-129e-44e3-a5c4-6e5954cc47e2"},"outputs":[{"ename":"NameError","evalue":"name 'cohort_sales' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-35-abb4e9530835\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 2\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Calculate non-cumulative sales totals\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 2\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_244_days_non_cumulative'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_244_days'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_122_days'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_277_days_non_cumulative'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_277_days'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcohort_sales\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sales_244_days'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'cohort_sales' is not defined"]}],"source":["\n","# Calculate non-cumulative sales totals\n","df.cohort_sales['sales_244_days_non_cumulative'] = (cohort_sales['sales_244_days'] - cohort_sales['sales_122_days']).copy()\n","df.cohort_sales['sales_277_days_non_cumulative'] = (cohort_sales['sales_277_days'] - cohort_sales['sales_244_days']).copy()\n","\n","\n","# Calculate non-cumulative recruits totals\n","cohort_recruits['recruits_244_days_non_cumulative'] = cohort_recruits['recruits_244_days'] - cohort_recruits['recruits_122_days']\n","cohort_recruits['recruits_277_days_non_cumulative'] = cohort_recruits['recruits_277_days'] - cohort_recruits['recruits_244_days']\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"executionInfo":{"elapsed":328,"status":"ok","timestamp":1724782074367,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"5knGXBxZBcAU","outputId":"57161bf3-8074-45c5-d24d-9950d6b73be7"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"df\",\n  \"rows\": 16285,\n  \"fields\": [\n    {\n      \"column\": \"consultant_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 139259,\n        \"min\": 55555,\n        \"max\": 999999,\n        \"num_unique_values\": 14236,\n        \"samples\": [\n          116506,\n          404034,\n          117150\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered_at\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2016-07-27 04:21:00\",\n        \"max\": \"2024-08-26 13:15:07\",\n        \"num_unique_values\": 15859,\n        \"samples\": [\n          \"2019-02-22 13:57:00\",\n          \"2023-08-29 16:36:04\",\n          \"2024-03-13 19:51:05\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales_122_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7,\n        \"min\": -1,\n        \"max\": 206,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          85,\n          -1,\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales_244_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": -1,\n        \"max\": 480,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          20,\n          64,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sales_277_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": -1,\n        \"max\": 492,\n        \"num_unique_values\": 104,\n        \"samples\": [\n          54,\n          82,\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recruits_122_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 21,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          0,\n          15,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recruits_244_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 60,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          1,\n          30,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"recruits_277_days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 63,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          11,\n          15,\n          28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"activated_at\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2015-09-30 00:00:00\",\n        \"max\": \"2024-08-26 13:38:28\",\n        \"num_unique_values\": 13730,\n        \"samples\": [\n          \"2023-10-31 17:52:56\",\n          \"2018-01-30 14:29:25\",\n          \"2021-11-03 10:30:02\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"consultant_role\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"Team Leader\",\n          \"Consultant\",\n          \"Prospect\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Inactive\",\n          \"Rejected\",\n          \"Active\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cohort_month\",\n      \"properties\": {\n        \"dtype\": \"period[M]\",\n        \"num_unique_values\": 98,\n        \"samples\": [\n          \"2020-08\",\n          \"2017-12\",\n          \"2024-08\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"df"},"text/html":["\n","  \u003cdiv id=\"df-af9a23f0-8165-4bba-a6c9-4715e3f37d56\" class=\"colab-df-container\"\u003e\n","    \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003econsultant_id\u003c/th\u003e\n","      \u003cth\u003eregistered_at\u003c/th\u003e\n","      \u003cth\u003esales_122_days\u003c/th\u003e\n","      \u003cth\u003esales_244_days\u003c/th\u003e\n","      \u003cth\u003esales_277_days\u003c/th\u003e\n","      \u003cth\u003erecruits_122_days\u003c/th\u003e\n","      \u003cth\u003erecruits_244_days\u003c/th\u003e\n","      \u003cth\u003erecruits_277_days\u003c/th\u003e\n","      \u003cth\u003eactivated_at\u003c/th\u003e\n","      \u003cth\u003econsultant_role\u003c/th\u003e\n","      \u003cth\u003estatus\u003c/th\u003e\n","      \u003cth\u003ecohort_month\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e0\u003c/th\u003e\n","      \u003ctd\u003e112490\u003c/td\u003e\n","      \u003ctd\u003e2019-06-10 14:24:00\u003c/td\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003e21\u003c/td\u003e\n","      \u003ctd\u003e21\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","      \u003ctd\u003e12\u003c/td\u003e\n","      \u003ctd\u003e2019-06-14 07:21:48\u003c/td\u003e\n","      \u003ctd\u003eTeam Leader\u003c/td\u003e\n","      \u003ctd\u003eActive\u003c/td\u003e\n","      \u003ctd\u003e2019-06\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003e111510\u003c/td\u003e\n","      \u003ctd\u003e2018-08-18 14:44:52\u003c/td\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003e42\u003c/td\u003e\n","      \u003ctd\u003e45\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","      \u003ctd\u003e6\u003c/td\u003e\n","      \u003ctd\u003e2018-08-20 13:00:04\u003c/td\u003e\n","      \u003ctd\u003eConsultant\u003c/td\u003e\n","      \u003ctd\u003eActive\u003c/td\u003e\n","      \u003ctd\u003e2018-08\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2\u003c/th\u003e\n","      \u003ctd\u003e111503\u003c/td\u003e\n","      \u003ctd\u003e2018-08-16 15:47:00\u003c/td\u003e\n","      \u003ctd\u003e15\u003c/td\u003e\n","      \u003ctd\u003e27\u003c/td\u003e\n","      \u003ctd\u003e33\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e2018-09-03 08:13:46\u003c/td\u003e\n","      \u003ctd\u003eConsultant\u003c/td\u003e\n","      \u003ctd\u003eActive\u003c/td\u003e\n","      \u003ctd\u003e2018-08\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003e112122\u003c/td\u003e\n","      \u003ctd\u003e2019-02-07 09:55:00\u003c/td\u003e\n","      \u003ctd\u003e10\u003c/td\u003e\n","      \u003ctd\u003e32\u003c/td\u003e\n","      \u003ctd\u003e36\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","      \u003ctd\u003e2019-02-14 12:19:28\u003c/td\u003e\n","      \u003ctd\u003eTeam Leader\u003c/td\u003e\n","      \u003ctd\u003eActive\u003c/td\u003e\n","      \u003ctd\u003e2019-02\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e4\u003c/th\u003e\n","      \u003ctd\u003e110649\u003c/td\u003e\n","      \u003ctd\u003e2017-11-02 14:02:00\u003c/td\u003e\n","      \u003ctd\u003e48\u003c/td\u003e\n","      \u003ctd\u003e90\u003c/td\u003e\n","      \u003ctd\u003e93\u003c/td\u003e\n","      \u003ctd\u003e15\u003c/td\u003e\n","      \u003ctd\u003e24\u003c/td\u003e\n","      \u003ctd\u003e27\u003c/td\u003e\n","      \u003ctd\u003e2017-11-30 00:00:00\u003c/td\u003e\n","      \u003ctd\u003eTeam Leader\u003c/td\u003e\n","      \u003ctd\u003eActive\u003c/td\u003e\n","      \u003ctd\u003e2017-11\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003c/div\u003e\n","    \u003cdiv class=\"colab-df-buttons\"\u003e\n","\n","  \u003cdiv class=\"colab-df-container\"\u003e\n","    \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af9a23f0-8165-4bba-a6c9-4715e3f37d56')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\"\u003e\n","\n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\"\u003e\n","    \u003cpath d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/\u003e\n","  \u003c/svg\u003e\n","    \u003c/button\u003e\n","\n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","    \u003cscript\u003e\n","      const buttonEl =\n","        document.querySelector('#df-af9a23f0-8165-4bba-a6c9-4715e3f37d56 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af9a23f0-8165-4bba-a6c9-4715e3f37d56');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    \u003c/script\u003e\n","  \u003c/div\u003e\n","\n","\n","\u003cdiv id=\"df-c139fe01-8ae5-4bfb-bde4-47613bc256fe\"\u003e\n","  \u003cbutton class=\"colab-df-quickchart\" onclick=\"quickchart('df-c139fe01-8ae5-4bfb-bde4-47613bc256fe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\"\u003e\n","\n","\u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\"\u003e\n","    \u003cg\u003e\n","        \u003cpath d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/\u003e\n","    \u003c/g\u003e\n","\u003c/svg\u003e\n","  \u003c/button\u003e\n","\n","\u003cstyle\u003e\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","\u003c/style\u003e\n","\n","  \u003cscript\u003e\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() =\u003e {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c139fe01-8ae5-4bfb-bde4-47613bc256fe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  \u003c/script\u003e\n","\u003c/div\u003e\n","\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n"],"text/plain":["   consultant_id       registered_at  sales_122_days  sales_244_days  \\\n","0         112490 2019-06-10 14:24:00              12              21   \n","1         111510 2018-08-18 14:44:52              24              42   \n","2         111503 2018-08-16 15:47:00              15              27   \n","3         112122 2019-02-07 09:55:00              10              32   \n","4         110649 2017-11-02 14:02:00              48              90   \n","\n","   sales_277_days  recruits_122_days  recruits_244_days  recruits_277_days  \\\n","0              21                  0                  6                 12   \n","1              45                  0                  6                  6   \n","2              33                  0                  0                  0   \n","3              36                  0                  0                  0   \n","4              93                 15                 24                 27   \n","\n","         activated_at consultant_role  status cohort_month  \n","0 2019-06-14 07:21:48     Team Leader  Active      2019-06  \n","1 2018-08-20 13:00:04      Consultant  Active      2018-08  \n","2 2018-09-03 08:13:46      Consultant  Active      2018-08  \n","3 2019-02-14 12:19:28     Team Leader  Active      2019-02  \n","4 2017-11-30 00:00:00     Team Leader  Active      2017-11  "]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":313,"status":"ok","timestamp":1724782356764,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"9GZLZfDuChqd","outputId":"fdca2ffd-90ef-4c66-82c1-24264c5c31f9"},"outputs":[{"name":"stdout","output_type":"stream","text":["   consultant_id       registered_at  sales_122_days  sales_244_days  \\\n","0         112490 2019-06-10 14:24:00              12              21   \n","1         111510 2018-08-18 14:44:52              24              42   \n","2         111503 2018-08-16 15:47:00              15              27   \n","3         112122 2019-02-07 09:55:00              10              32   \n","4         110649 2017-11-02 14:02:00              48              90   \n","\n","   sales_277_days  recruits_122_days  recruits_244_days  recruits_277_days  \\\n","0              21                  0                  6                 12   \n","1              45                  0                  6                  6   \n","2              33                  0                  0                  0   \n","3              36                  0                  0                  0   \n","4              93                 15                 24                 27   \n","\n","         activated_at consultant_role  ... sales_122_days_cohort  \\\n","0 2019-06-14 07:21:48     Team Leader  ...              6.205479   \n","1 2018-08-20 13:00:04      Consultant  ...              6.382979   \n","2 2018-09-03 08:13:46      Consultant  ...              6.382979   \n","3 2019-02-14 12:19:28     Team Leader  ...              2.888889   \n","4 2017-11-30 00:00:00     Team Leader  ...              8.666667   \n","\n","  sales_244_days_cohort  sales_277_days_cohort  sales_244_days_non_cumulative  \\\n","0             12.767123              13.219178                       6.561644   \n","1             10.808511              11.808511                       4.425532   \n","2             10.808511              11.808511                       4.425532   \n","3              6.430556               7.888889                       3.541667   \n","4             14.697917              15.583333                       6.031250   \n","\n","   sales_277_days_non_cumulative  recruits_122_days_cohort  \\\n","0                       0.452055                  0.232877   \n","1                       1.000000                  0.276596   \n","2                       1.000000                  0.276596   \n","3                       1.458333                  0.041667   \n","4                       0.885417                  0.739583   \n","\n","   recruits_244_days_cohort  recruits_277_days_cohort  \\\n","0                  1.287671                  1.643836   \n","1                  0.808511                  0.808511   \n","2                  0.808511                  0.808511   \n","3                  0.097222                  0.111111   \n","4                  1.843750                  2.072917   \n","\n","   recruits_244_days_non_cumulative  recruits_277_days_non_cumulative  \n","0                          1.054795                          0.356164  \n","1                          0.531915                          0.000000  \n","2                          0.531915                          0.000000  \n","3                          0.055556                          0.013889  \n","4                          1.104167                          0.229167  \n","\n","[5 rows x 22 columns]\n","\u003cclass 'pandas.core.frame.DataFrame'\u003e\n","RangeIndex: 16285 entries, 0 to 16284\n","Data columns (total 22 columns):\n"," #   Column                            Non-Null Count  Dtype         \n","---  ------                            --------------  -----         \n"," 0   consultant_id                     16285 non-null  int64         \n"," 1   registered_at                     16280 non-null  datetime64[ns]\n"," 2   sales_122_days                    16285 non-null  int64         \n"," 3   sales_244_days                    16285 non-null  int64         \n"," 4   sales_277_days                    16285 non-null  int64         \n"," 5   recruits_122_days                 16285 non-null  int64         \n"," 6   recruits_244_days                 16285 non-null  int64         \n"," 7   recruits_277_days                 16285 non-null  int64         \n"," 8   activated_at                      15841 non-null  datetime64[ns]\n"," 9   consultant_role                   16263 non-null  object        \n"," 10  status                            16263 non-null  object        \n"," 11  cohort_month                      16280 non-null  period[M]     \n"," 12  sales_122_days_cohort             16280 non-null  float64       \n"," 13  sales_244_days_cohort             16280 non-null  float64       \n"," 14  sales_277_days_cohort             16280 non-null  float64       \n"," 15  sales_244_days_non_cumulative     16280 non-null  float64       \n"," 16  sales_277_days_non_cumulative     16280 non-null  float64       \n"," 17  recruits_122_days_cohort          16280 non-null  float64       \n"," 18  recruits_244_days_cohort          16280 non-null  float64       \n"," 19  recruits_277_days_cohort          16280 non-null  float64       \n"," 20  recruits_244_days_non_cumulative  16280 non-null  float64       \n"," 21  recruits_277_days_non_cumulative  16280 non-null  float64       \n","dtypes: datetime64[ns](2), float64(10), int64(7), object(2), period[M](1)\n","memory usage: 2.7+ MB\n","None\n"]}],"source":["# Merge cohort_sales back to the original df\n","df = df.merge(cohort_sales, on='cohort_month', how='left', suffixes=('', '_cohort'))\n","\n","# Merge cohort_recruits back to the original df\n","df = df.merge(cohort_recruits, on='cohort_month', how='left', suffixes=('', '_cohort'))\n","\n","# Display the DataFrame and check its info\n","print(df.head())\n","print(df.info())\n"]},{"cell_type":"code","execution_count":34,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"executionInfo":{"elapsed":172,"status":"error","timestamp":1729096592202,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"HXjPG4b5Ctug","outputId":"3fee77d8-c391-4f44-b65f-7fb0e908cd96"},"outputs":[{"ename":"NameError","evalue":"name 'cohort_sales' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-34-269377032919\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 2\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Display the distinct cohort sales and associated cohort month\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Optionally, if you want to see just a sample or first few rows\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcohort_sales\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'cohort_sales' is not defined"]}],"source":["# Display the distinct cohort sales and associated cohort month\n","print(cohort_sales)\n","\n","# Optionally, if you want to see just a sample or first few rows\n","print(cohort_sales.head())\n","\n","# If you want to see the columns and their data types\n","print(cohort_sales.info())"]},{"cell_type":"markdown","metadata":{"id":"Xc6VCQJmHjGW"},"source":["PICKING BACK UP HERE"]},{"cell_type":"markdown","metadata":{"id":"B9wJj3G-HlBT"},"source":["Stats Tests:\n","1. Check your Assumptions.\n","a. normally distributed\n","b.\n","2. Run your tests (parametric if your assumptiosn are met/ non parametric equivalents if your assumptions fail)"]},{"cell_type":"markdown","metadata":{"id":"I9RynbFGJgQ9"},"source":["Assumptions: 1. NOrmal distribution"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":166,"status":"ok","timestamp":1729096679525,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"I1MESMaRMWrh","outputId":"2e05a2c3-57a5-466a-f727-8e1e3fc0b84f"},"outputs":[{"name":"stdout","output_type":"stream","text":["      registered_program  lifetime_sales  avg_all_time_sales  \\\n","0            Commissions            10.0            6.538854   \n","1            Commissions            10.0            6.538854   \n","2            Commissions             2.0            6.538854   \n","3            Commissions             4.0            6.538854   \n","4            Commissions            52.0            6.538854   \n","...                  ...             ...                 ...   \n","14691            earning             5.0            6.538854   \n","14692            earning             NaN            6.538854   \n","14693            earning             1.0            6.538854   \n","14694            earning             NaN            6.538854   \n","14695         commission             NaN            6.538854   \n","\n","       avg_program_sales  avg_activation_year_sales most_recent_sale_date  \\\n","0               1.605537                 128.428571   2016-12-20 13:01:56   \n","1               1.605537                 128.428571   2016-09-27 11:31:00   \n","2               1.605537                 128.428571   2016-02-22 12:19:00   \n","3               1.605537                 128.428571   2017-01-25 14:16:34   \n","4               1.605537                 128.428571   2019-08-20 00:00:00   \n","...                  ...                        ...                   ...   \n","14691           1.076071                   3.592857   2023-12-04 06:52:27   \n","14692           1.076071                   1.989165                   NaN   \n","14693           1.076071                   3.592857   2023-11-30 08:30:21   \n","14694           1.076071                   1.989165                   NaN   \n","14695           0.532970                   3.592857                   NaN   \n","\n","       Cohort_program_sales_max  avg_program_sales_life  \\\n","0                      5.424104               21.709677   \n","1                      5.424104               21.709677   \n","2                      5.424104               21.709677   \n","3                      5.424104               21.709677   \n","4                      5.424104               21.709677   \n","...                         ...                     ...   \n","14691                  2.707287                3.867961   \n","14692                  2.707287                3.867961   \n","14693                  2.707287                3.867961   \n","14694                  2.707287                3.867961   \n","14695                  1.621755                2.365274   \n","\n","            ach_sale_5_level ach_sale_3_level  ...  lifetime_sales_2  \\\n","0         Above avg top half        Above avg  ...              10.0   \n","1         Above avg top half        Above avg  ...              10.0   \n","2      below avg bottom half        below avg  ...               2.0   \n","3         below avg top half        below avg  ...               4.0   \n","4         Above avg top half        Above avg  ...              52.0   \n","...                      ...              ...  ...               ...   \n","14691     below avg top half        below avg  ...               5.0   \n","14692                    NaN              NaN  ...               NaN   \n","14693  below avg bottom half        below avg  ...               1.0   \n","14694                    NaN              NaN  ...               NaN   \n","14695                    NaN              NaN  ...               NaN   \n","\n","       avg_all_time_sales_1 avg_program_sales_life_1  \\\n","0                  6.538854                21.709677   \n","1                  6.538854                21.709677   \n","2                  6.538854                21.709677   \n","3                  6.538854                21.709677   \n","4                  6.538854                21.709677   \n","...                     ...                      ...   \n","14691              6.538854                 3.867961   \n","14692              6.538854                 3.867961   \n","14693              6.538854                 3.867961   \n","14694              6.538854                 3.867961   \n","14695              6.538854                 2.365274   \n","\n","      activation_year_cohort_size avg_activation_year_sales_1  \\\n","0                               7                  128.428571   \n","1                               7                  128.428571   \n","2                               7                  128.428571   \n","3                               7                  128.428571   \n","4                               7                  128.428571   \n","...                           ...                         ...   \n","14691                        2877                    3.592857   \n","14692                        2236                    1.989165   \n","14693                        2877                    3.592857   \n","14694                        2236                    1.989165   \n","14695                        2877                    3.592857   \n","\n","       most_recent_sale_date_1  training_power_total lst_filled cohort_filled  \\\n","0          2016-12-20 13:01:56                     2       10.0           9.0   \n","1          2016-09-27 11:31:00                     2       10.0          10.0   \n","2          2016-02-22 12:19:00                     2        2.0           2.0   \n","3          2017-01-25 14:16:34                     2        4.0           2.0   \n","4          2019-08-20 00:00:00                     2       52.0          11.0   \n","...                        ...                   ...        ...           ...   \n","14691      2023-12-04 06:52:27                     2        5.0           5.0   \n","14692                      NaN                     2        0.0           0.0   \n","14693      2023-11-30 08:30:21                     2        1.0           1.0   \n","14694                      NaN                     2        0.0           0.0   \n","14695                      NaN                     1        0.0           0.0   \n","\n","      cohort_month  \n","0          2015-11  \n","1          2015-11  \n","2          2015-09  \n","3          2015-12  \n","4          2015-12  \n","...            ...  \n","14691      2023-09  \n","14692      2024-03  \n","14693      2023-11  \n","14694      2024-08  \n","14695      2023-08  \n","\n","[14696 rows x 92 columns]\n"]}],"source":["print(df)"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":363,"status":"ok","timestamp":1729096661514,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"lW1V37F5MLX8"},"outputs":[],"source":["#getting tired, importing any libraries I missed above\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import scipy.stats as stats\n","from statsmodels.graphics.gofplots import qqplot\n"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":927},"executionInfo":{"elapsed":3653,"status":"ok","timestamp":1729096666405,"user":{"displayName":"lyn Ga","userId":"13406750184497399458"},"user_tz":240},"id":"s7maejePMR63","outputId":"cf2607fa-2b25-4b40-9681-b149ea9aab09"},"outputs":[{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["\u003cFigure size 640x480 with 1 Axes\u003e"]},"metadata":{},"output_type":"display_data"}],"source":["# Assuming you have a DataFrame called df with your sales data\n","\n","# Histogram for p30_sales\n","sns.histplot(df['p30_sales'], kde=True)\n","plt.title('Histogram of p30_sales')\n","plt.show()\n","\n","# Q-Q Plot for p30_sales\n","qqplot(df['p30_sales'], line='s')\n","plt.title('Q-Q Plot for p30_sales')\n","plt.show()\n","\n","# Repeat the same for ep90_sales and p365_sales\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/","height":321},"id":"eW4lDsMvNb2X"},"outputs":[{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-42-95dfd71d60bb\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 7\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#Show me all of the pair plots in the data:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 7\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpairplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mpairplot\u001b[0;34m(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\u001b[0m\n\u001b[1;32m   2117\u001b[0m     \u001b[0;31m# Set up the PairGrid\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2118\u001b[0m     \u001b[0mgrid_kws\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"diag_sharey\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdiag_kind\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"hist\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2119\u001b[0;31m     grid = PairGrid(data, vars=vars, x_vars=x_vars, y_vars=y_vars, hue=hue,\n\u001b[0m\u001b[1;32m   2120\u001b[0m                     \u001b[0mhue_order\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhue_order\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcorner\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcorner\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2121\u001b[0m                     height=height, aspect=aspect, dropna=dropna, **grid_kws)\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, hue, vars, x_vars, y_vars, hue_order, palette, hue_kws, corner, diag_sharey, height, aspect, layout_pad, despine, dropna)\u001b[0m\n\u001b[1;32m   1362\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mdespine\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1363\u001b[0m             \u001b[0mutils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdespine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1364\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlayout_pad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1365\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1366\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/seaborn/axisgrid.py\u001b[0m in \u001b[0;36mtight_layout\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    121\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tight_layout_pad\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"pad\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_tight_layout_pad\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 123\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_figure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    124\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    125\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mtight_layout\u001b[0;34m(self, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[1;32m   3507\u001b[0m             \u001b[0mprevious_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_layout_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3508\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_layout_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3509\u001b[0;31m             \u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexecute\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3510\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprevious_engine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTightLayoutEngine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3511\u001b[0m                     \u001b[0;32mand\u001b[0m \u001b[0mprevious_engine\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/layout_engine.py\u001b[0m in \u001b[0;36mexecute\u001b[0;34m(self, fig)\u001b[0m\n\u001b[1;32m    176\u001b[0m         \u001b[0mrenderer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_renderer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"_draw_disabled\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnullcontext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 178\u001b[0;31m             kwargs = get_tight_layout_figure(\n\u001b[0m\u001b[1;32m    179\u001b[0m                 \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mget_subplotspec_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m                 \u001b[0mpad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'pad'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mh_pad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'h_pad'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mw_pad\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minfo\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'w_pad'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_tight_layout.py\u001b[0m in \u001b[0;36mget_tight_layout_figure\u001b[0;34m(fig, axes_list, subplotspec_list, renderer, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[1;32m    264\u001b[0m             slice(ss.colspan.start * div_col, ss.colspan.stop * div_col)))\n\u001b[1;32m    265\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 266\u001b[0;31m     kwargs = _auto_adjust_subplotpars(fig, renderer,\n\u001b[0m\u001b[1;32m    267\u001b[0m                                       \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_nrows\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_ncols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    268\u001b[0m                                       \u001b[0mspan_pairs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mspan_pairs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_tight_layout.py\u001b[0m in \u001b[0;36m_auto_adjust_subplotpars\u001b[0;34m(fig, renderer, shape, span_pairs, subplot_list, ax_bbox_list, pad, h_pad, w_pad, rect)\u001b[0m\n\u001b[1;32m     80\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msubplots\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     81\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_visible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 82\u001b[0;31m                 \u001b[0mbb\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mmartist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_tightbbox_for_layout_only\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m         \u001b[0mtight_bbox_raw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBbox\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36m_get_tightbbox_for_layout_only\u001b[0;34m(obj, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1413\u001b[0m     \"\"\"\n\u001b[1;32m   1414\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1415\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"for_layout_only\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1416\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1417\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_tightbbox\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mget_tightbbox\u001b[0;34m(self, renderer, call_axes_locator, bbox_extra_artists, for_layout_only)\u001b[0m\n\u001b[1;32m   4386\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mba\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4387\u001b[0m                     \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mba\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 4388\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_update_title_position\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4389\u001b[0m         \u001b[0maxbbox\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_window_extent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4390\u001b[0m         \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxbbox\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36m_update_title_position\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   2967\u001b[0m                         \u001b[0mbb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mspines\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'outline'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_window_extent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2968\u001b[0m                     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2969\u001b[0;31m                         \u001b[0mbb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_window_extent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2970\u001b[0m                 \u001b[0mtop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mymax\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2971\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mtitle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    408\u001b[0m                          \u001b[0;32melse\u001b[0m \u001b[0mdeprecation_addendum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m                 **kwargs)\n\u001b[0;32m--\u003e 410\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    411\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    412\u001b[0m     \u001b[0mDECORATORS\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mwrapper\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecorator\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_api/deprecation.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*inner_args, **inner_kwargs)\u001b[0m\n\u001b[1;32m    383\u001b[0m             \u001b[0;31m# calling bind()).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    384\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 385\u001b[0;31m         \u001b[0marguments\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msignature\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minner_args\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0minner_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marguments\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    386\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_varargs\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0marguments\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    387\u001b[0m             warn_deprecated(\n","\u001b[0;32m/usr/lib/python3.10/inspect.py\u001b[0m in \u001b[0;36mbind\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3184\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mpassed\u001b[0m \u001b[0marguments\u001b[0m \u001b[0mcan\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mbe\u001b[0m \u001b[0mbound\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3185\u001b[0m         \"\"\"\n\u001b[0;32m-\u003e 3186\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_bind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3188\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mbind_partial\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m/\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"name":"stdout","output_type":"stream","text":["Error in callback \u003cfunction _draw_all_if_interactive at 0x7ea1326b0ee0\u003e (for post_execute):\n"]},{"ename":"KeyboardInterrupt","evalue":"","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36m_draw_all_if_interactive\u001b[0;34m()\u001b[0m\n\u001b[1;32m    118\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_draw_all_if_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_interactive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 120\u001b[0;31m         \u001b[0mdraw_all\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/_pylab_helpers.py\u001b[0m in \u001b[0;36mdraw_all\u001b[0;34m(cls, force)\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmanager\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcls\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_all_fig_managers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mforce\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mmanager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstale\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 132\u001b[0;31m                 \u001b[0mmanager\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    133\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mdraw_idle\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2080\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_idle_drawing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2081\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_idle_draw_cntx\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2082\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2083\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2084\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    398\u001b[0m              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar\n\u001b[1;32m    399\u001b[0m               else nullcontext()):\n\u001b[0;32m--\u003e 400\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    401\u001b[0m             \u001b[0;31m# A GUI class may be need to update a window using this draw, so\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    402\u001b[0m             \u001b[0;31m# don't forget to call the superclass.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 95\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rasterizing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3138\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3139\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3140\u001b[0;31m             mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3141\u001b[0m                 renderer, self, artists, self.suppressComposite)\n\u001b[1;32m   3142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/axes/_base.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m   3062\u001b[0m             \u001b[0m_draw_rasterized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0martists_rasterized\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3063\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 3064\u001b[0;31m         mimage._draw_list_compositing_images(\n\u001b[0m\u001b[1;32m   3065\u001b[0m             renderer, self, artists, self.figure.suppressComposite)\n\u001b[1;32m   3066\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[0;34m(renderer, parent, artists, suppress_composite)\u001b[0m\n\u001b[1;32m    129\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    130\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0ma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0martists\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 131\u001b[0;31m             \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    132\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    133\u001b[0m         \u001b[0;31m# Composite any adjacent images together\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[0;34m(artist, renderer)\u001b[0m\n\u001b[1;32m     70\u001b[0m                 \u001b[0mrenderer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 72\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0martist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0martist\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_agg_filter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36mdraw\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    750\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    751\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_cm_set\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_wrapped_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 752\u001b[0;31m             \u001b[0mbbox\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minfo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdescent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    753\u001b[0m             \u001b[0mtrans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    754\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/text.py\u001b[0m in \u001b[0;36m_get_layout\u001b[0;34m(self, renderer)\u001b[0m\n\u001b[1;32m    425\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    426\u001b[0m         \u001b[0;31m# get the rotation matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 427\u001b[0;31m         \u001b[0mM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mAffine2D\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrotate_deg\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_rotation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    428\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    429\u001b[0m         \u001b[0;31m# now offset the individual text lines within the box\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/transforms.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, matrix, **kwargs)\u001b[0m\n\u001b[1;32m   1893\u001b[0m             \u001b[0;31m# A bit faster than np.identity(3).\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1894\u001b[0m             \u001b[0mmatrix\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mIdentityTransform\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mtx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mtx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmatrix\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1896\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invalid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1897\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["#Show me all the historgrams, plz:\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","df.hist(figsize=(20,30))\n","#Show me all of the pair plots in the data:\n","sns.pairplot(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jtUqv_PDNvCK"},"outputs":[],"source":["from scipy.stats import shapiro\n","\n","# Shapiro-Wilk Test for p30_sales\n","stat, p = shapiro(df['p30_sales'])\n","print(f'Shapiro-Wilk Test for p30_sales: Statistics={stat}, p-value={p}')\n","\n","# Shapiro-Wilk Test for ep90_sales\n","stat, p = shapiro(df['ep90_sales'])\n","print(f'Shapiro-Wilk Test for ep90_sales: Statistics={stat}, p-value={p}')\n","\n","# Shapiro-Wilk Test for p365_sales\n","stat, p = shapiro(df['p365_sales'])\n","print(f'Shapiro-Wilk Test for p365_sales: Statistics={stat}, p-value={p}')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ESioIaUcODSK"},"outputs":[],"source":["#Kernal Density Estimate to check if distribution is normal.\n","sns.displot(data=df, x='p30_sales', kde=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kKH8qI_4OL_-"},"outputs":[],"source":["#Normal Distribution:\n","# import the required function\n","from scipy.stats import norm\n","\n","# estimate the mean and standard deviation of the SAT scores data\n","mu = df[\"p30_sales\"].mean()\n","sigma = sat_score[\"score\"].std()\n","print(\"The estimated mean is\", round(mu, 2))\n","print(\"The estimated standard deviation is\", round(sigma, 2))"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMadXMqmuo0HpzQDlfp+BtL","mount_file_id":"1fh03jmuABkZLo6i08PuY79w7c1MCAIhu","name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}